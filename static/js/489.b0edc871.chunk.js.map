{"version":3,"file":"static/js/489.b0edc871.chunk.js","mappings":"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","sources":["pages/Order_Page/components/Message.tsx","pages/Order_Page/components/NoParts.tsx","fixtures/fixtures.ts","pages/Order_Page/components/Order_Details/index.ts","reduxware/thunks/sendOrder.ts","pages/Order_Page/components/Order_Details/Order_Details.tsx","pages/Order_Page/components/Part.tsx","pages/Order_Page/components/Parts/index.tsx","pages/Order_Page/components/Parts/Parts.tsx","pages/Order_Page/components/Summary/Summary_Header.tsx","pages/Order_Page/components/Summary/Summary.tsx","pages/Order_Page/Order_Page.tsx","pages/Order_Page/index.ts"],"sourcesContent":["interface Props {\r\n    message: string;\r\n}\r\n\r\nconst Message = (props: Props): JSX.Element => {\r\n    const { message } = props;\r\n\r\n    return (\r\n        <article className=\"error\">\r\n            <div className=\"message\">\r\n                <p className=\"message__general-message\">Hi, &#128512;</p>\r\n                <hr />\r\n                <div className=\"message__error-message\">{message ? message : \"\"}</div>\r\n            </div>\r\n        </article>\r\n    );\r\n};\r\n\r\nexport default Message;\r\n","import React from \"react\";\r\n\r\nconst NoParts = React.memo(() => {\r\n    return <div>It seems that Dementors sucked all the parts &#128553;</div>;\r\n});\r\n\r\nexport default NoParts;\r\n","export const FORM_ID = \"minifigs-ordr-form-id\";\r\n","import { connect } from \"react-redux\";\r\nimport { OrderDetails } from \"./Order_Details\";\r\nimport { sendOrder } from \"reduxware/thunks/sendOrder\";\r\n\r\nimport { NavigateFunction } from \"react-router-dom\";\r\nimport { UseMessage } from \"hooks/useMessage\";\r\n\r\nconst mapDispatchToProps = (dispatch: Function) => ({\r\n    sendOrder: (navigate: NavigateFunction, showMessage: UseMessage, data: FormData) => dispatch(sendOrder(navigate, showMessage, data)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(OrderDetails);\r\n","import { ThunkAction } from \"redux-thunk\";\r\nimport { Action } from \"redux\";\r\nimport { NavigateFunction } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\nimport { showError } from \"../actionCreators\";\r\nimport { RootStateType, ShowError } from \"types\";\r\nimport { Paths } from \"routes/paths\";\r\nimport { UseMessage } from \"hooks/useMessage\";\r\n\r\nconst URL = \"https://jsonplaceholder.typicode.com/posts\";\r\n\r\nconst SWITCH_TIMEOUT = 5000;\r\n\r\nexport const sendOrder = (navigate: NavigateFunction, showMessage: UseMessage, data: FormData): ThunkAction<void, RootStateType, unknown, Action> => {\r\n    const options = {\r\n        headers: {\r\n            \"Content-type\": \"application/json; charset=UTF-8\",\r\n        },\r\n    };\r\n\r\n    return async dispatch => {\r\n        axios\r\n            .post(URL, data, options)\r\n            .then(data => {\r\n                if (data) {\r\n                    try {\r\n                        showMessage.success(\"Your order has been successfully proceeded\");\r\n                        setTimeout(() => navigate(Paths.intro), SWITCH_TIMEOUT);\r\n                    } catch (error) {\r\n                        dispatch(showError({ isError: true, errorMessage: \"Error occured during order placing\" }));\r\n                    }\r\n                } else {\r\n                    dispatch(showError({ isError: true, errorMessage: \"Empty data received from receiver's endpoint\" }));\r\n                }\r\n            })\r\n            .catch(error => {\r\n                let result: ShowError;\r\n                if (axios.isAxiosError(error)) {\r\n                    result = {\r\n                        isError: true,\r\n                        errorMessage: \"The following error occured when placing order: \" + error.message,\r\n                    };\r\n                } else {\r\n                    result = {\r\n                        isError: true,\r\n                        errorMessage: \"Unknown error occured when placing order\",\r\n                    };\r\n                }\r\n\r\n                dispatch(showError(result));\r\n            });\r\n    };\r\n};\r\nexport type SendOrder = typeof sendOrder;\r\n","import { useForm } from \"react-hook-form\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useMemo, useRef } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getSelectedMinifigNumber } from \"reduxware/selectors\";\r\n\r\nimport { FORM_ID } from \"fixtures\";\r\nimport { SendOrder } from \"types\";\r\nimport { useMessage, useValidationResults } from \"hooks\";\r\nimport { fieldsArray, validators } from \"../../utils/validationUtils\";\r\n\r\ninterface Props {\r\n    sendOrder: SendOrder;\r\n}\r\nexport const OrderDetails = (props: Props) => {\r\n    const { sendOrder } = props;\r\n    const minifigSetNumber = useSelector(getSelectedMinifigNumber);\r\n    const refForm = useRef<HTMLFormElement>(null);\r\n    const navigate = useNavigate();\r\n    const showMessage = useMessage();\r\n\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors },\r\n    } = useForm();\r\n\r\n    const onFormSubmit = () => {\r\n        const pack = new FormData(refForm.current as HTMLFormElement);\r\n        pack.append(\"setNumber\", minifigSetNumber);\r\n        pack && sendOrder(navigate, showMessage, pack);\r\n    };\r\n\r\n    const fixedErrors = useMemo(() => errors, [errors]);\r\n    const validationResults = useValidationResults(fixedErrors, fieldsArray) as any;\r\n\r\n    return (\r\n        <>\r\n            {/**Firstname */}\r\n            <form className=\"details\" id={FORM_ID} onSubmit={handleSubmit(onFormSubmit)} ref={refForm}>\r\n                <h1 className=\"fromLeft\">Shipping details</h1>\r\n                <div className=\"foo\" id=\"foo\"></div>\r\n                <div className=\"form-item extendable\">\r\n                    <label className=\"required\" htmlFor=\"firstName\">\r\n                        Name\r\n                    </label>\r\n                    <input type=\"text\" {...register(\"firstName\", validators.firstName)} id=\"firstName\" />\r\n                    {validationResults && validationResults?.firstName?.isError && <span>{validationResults?.firstName?.errorMessage}</span>}\r\n                </div>\r\n\r\n                {/**Surname */}\r\n\r\n                <div className=\"form-item extendable\">\r\n                    <label className=\"required\" htmlFor=\"Surname\">\r\n                        Surname\r\n                    </label>\r\n                    <input id=\"Surname\" type=\"text\" {...register(\"surName\", validators.surName)} />\r\n                    {validationResults && validationResults?.surName?.isError && <span>{validationResults?.surName?.errorMessage}</span>} {/**nie mieści się regex w jednej linii z tekstem, nachodzi na to co powyzej */}\r\n                </div>\r\n\r\n                {/**Phone */}\r\n\r\n                <div className=\"form-item full-width\">\r\n                    <label className=\"required\" htmlFor=\"Phone\">\r\n                        Phone Number\r\n                    </label>\r\n                    <input id=\"Phone\" placeholder=\"Mobile or regular Polish phone with country code like 048 669086566\" type=\"text\" {...register(\"phone\", validators.phone)} />\r\n                    {validationResults && validationResults?.phone?.isError && <span>{validationResults?.phone?.errorMessage}</span>}\r\n                </div>\r\n                {/* tu tez regex się nie mieści*/}\r\n\r\n                {/**Email */}\r\n\r\n                <div className=\"form-item full-width\">\r\n                    <label className=\"required\" htmlFor=\"email\">\r\n                        Email\r\n                    </label>\r\n                    <input id=\"email\" type=\"text\" {...register(\"email\", validators.email)} />\r\n                    {validationResults && validationResults?.email?.isError && <span>{validationResults?.email?.errorMessage}</span>}\r\n                </div>\r\n\r\n                {/**Date of Birth */}\r\n\r\n                <div className=\"form-item full-width\">\r\n                    <label htmlFor=\"DoB\">Date of Birth</label>\r\n                    <input id=\"DoB\" placeholder=\"Date in yyyy-mm-dd or yyyy-m-dd format \" type=\"text\" {...register(\"dob\", validators.dob)} />\r\n                    {validationResults && validationResults?.dob?.isError && <span>{validationResults?.dob?.errorMessage}</span>}\r\n                </div>\r\n\r\n                <div className=\"form-item full-width\">\r\n                    <label className=\"required\" htmlFor=\"address\">\r\n                        Address\r\n                    </label>\r\n                    <input type=\"text\" id=\"address\" {...register(\"address\", validators.address)} />\r\n                    {validationResults && validationResults?.address?.isError && <span>{validationResults?.address?.errorMessage}</span>}\r\n                </div>\r\n\r\n                {/**City */}\r\n\r\n                <div className=\"form-item full-width\">\r\n                    <label className=\"required\" htmlFor=\"city\">\r\n                        City\r\n                    </label>\r\n                    <input type=\"text\" id=\"city\" {...register(\"city\", validators.city)} />\r\n                    {validationResults && validationResults?.city?.isError && <span>{validationResults?.city?.errorMessage}</span>}\r\n                </div>\r\n\r\n                {/**State */}\r\n\r\n                <div className=\"form-item\">\r\n                    <label className=\"required\" htmlFor=\"state\">\r\n                        State\r\n                    </label>\r\n                    <input type=\"text\" id=\"state\" {...register(\"state\", validators.state)} />\r\n                </div>\r\n\r\n                {/**Zip Code */}\r\n\r\n                <div className=\"form-item\">\r\n                    <label className=\"required\" htmlFor=\"ZipCode\">\r\n                        Zip Code\r\n                    </label>\r\n                    <input id=\"ZipCode\" type=\"text\" placeholder=\" zip code in format xx-xxx\" {...register(\"zip\", validators.zip)} />\r\n                    {validationResults && validationResults?.zip?.isError && <span>{validationResults?.zip?.errorMessage}</span>}\r\n                </div>\r\n            </form>\r\n        </>\r\n    );\r\n};\r\n","import { ReactEventHandler } from \"react\";\r\nimport { PartsItem } from \"types\";\r\n\r\ninterface Props {\r\n    data: PartsItem;\r\n    loadHandler?: ReactEventHandler<HTMLImageElement>;\r\n}\r\nconst Part = (props: Props) => {\r\n    const { data, loadHandler } = props;\r\n\r\n    return (\r\n        <div className=\"part\">\r\n            <img className=\"part__image\" src={data.part.part_img_url} alt={data.part.name} onLoad={loadHandler} onError={loadHandler}></img>\r\n            <div className=\"part__text-items\">\r\n                <div className=\"part__item part__name\">{data.part.name}</div>\r\n                <a className=\"part__item part__code\" href={data.part.part_img_url} target=\"blank\">\r\n                    {data.part.part_num}\r\n                </a>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Part;\r\n","import { Parts } from \"./Parts\";\r\n\r\nexport default Parts;\r\n","import uuid from \"react-uuid\";\r\n\r\nimport { after, isEmpty } from \"lodash\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useRef } from \"react\";\r\n\r\nimport { LoadingIndicator } from \"components\";\r\nimport { Part, NoParts } from \"../../components\";\r\nimport { PartsItem } from \"types\";\r\nimport { isOffline } from \"functions\";\r\nimport { useGetPartsQuery } from \"../../utils/partsApi\";\r\nimport { getSelectedMinifigNumber } from \"reduxware/selectors\";\r\n\r\nexport const Parts = () => {\r\n    const minifigID = useSelector(getSelectedMinifigNumber);\r\n    const { data: parts, isFetching, isError } = useGetPartsQuery(minifigID, { skip: isOffline() });\r\n    const refImages = useRef<HTMLDivElement>(null);\r\n\r\n    const onLoad = parts\r\n        ? after(parts.length, () => {\r\n              refImages.current?.classList.add(\"active\");\r\n          })\r\n        : () => {};\r\n\r\n    if (isFetching) return <LoadingIndicator />;\r\n    if (isError) return <NoParts />;\r\n\r\n    return parts && !isEmpty(parts) ? (\r\n        <div className=\"parts\" ref={refImages}>\r\n            {parts.map((partData: PartsItem) => {\r\n                return <Part data={partData} key={uuid()} loadHandler={onLoad} />;\r\n            })}\r\n        </div>\r\n    ) : (\r\n        <NoParts />\r\n    );\r\n};\r\n","import { Minifig } from \"types/index\";\r\nimport { Picture, Name } from \"components\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getSelectedMinifig } from \"reduxware/selectors\";\r\n\r\nexport const SummaryHeader = () => {\r\n    const fig = useSelector(getSelectedMinifig);\r\n    const { name, num_parts: num, set_img_url: url } = fig as Minifig;\r\n    const partsInfo = `There are ${num} parts in this minifig:`;\r\n\r\n    return (\r\n        <div className=\"summary__main items\">\r\n            <h2 className=\"black fromLeft\">Summary</h2>\r\n            <div className=\"minifigCard minifigCard--no-padding\">\r\n                {name && url && <Picture name={name} imageURL={url} />}\r\n                {name && <Name name={name} />}\r\n            </div>\r\n            {num && <p>{partsInfo}</p>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SummaryHeader;\r\n","import { BasicButton } from \"components\";\r\nimport { Parts } from \"../../components\";\r\nimport SummaryHeader from \"./Summary_Header\";\r\nimport { FORM_ID } from \"fixtures\";\r\n\r\nconst Summary = () => {\r\n    return (\r\n        <div className=\"summary\">\r\n            <SummaryHeader />\r\n            <Parts />\r\n            <BasicButton className=\"button uppercased\" type=\"submit\" form={FORM_ID}>\r\n                Submit\r\n            </BasicButton>\r\n        </div>\r\n    );\r\n};\r\nexport default Summary;\r\n","import { OrderDetails, Message, Summary } from \"./components\";\r\nimport { isOffline } from \"functions\";\r\n\r\nconst Order_Page = () => {\r\n    if (isOffline()) return <Message message={\"No Internet connection, try again some later\"} />;\r\n    return (\r\n        <main className=\"order\">\r\n            <OrderDetails />\r\n            <Summary />\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default Order_Page;\r\n","import { connect } from \"react-redux\";\r\nimport { RootStateType } from \"types\";\r\n\r\nimport Order_Page from \"./Order_Page\";\r\n\r\nconst mapStateToProps = (state: RootStateType) => ({\r\n    message: state.fetch.message,\r\n    isMessage: state.fetch.isMessage,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(Order_Page);\r\n"],"names":["props","message","className","React","FORM_ID","connect","dispatch","sendOrder","navigate","showMessage","data","options","headers","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","_context","prev","next","axios","post","then","success","setTimeout","Paths","intro","error","showError","isError","errorMessage","catch","result","isAxiosError","stop","_x","apply","arguments","_validationResults$fi","_validationResults$fi2","_validationResults$su","_validationResults$su2","_validationResults$ph","_validationResults$ph2","_validationResults$em","_validationResults$em2","_validationResults$do","_validationResults$do2","_validationResults$ad","_validationResults$ad2","_validationResults$ci","_validationResults$ci2","_validationResults$zi","_validationResults$zi2","minifigSetNumber","useSelector","getSelectedMinifigNumber","refForm","useRef","useNavigate","useMessage","_useForm","useForm","register","handleSubmit","errors","formState","fixedErrors","useMemo","validationResults","useValidationResults","fieldsArray","_jsx","_Fragment","children","_jsxs","id","onSubmit","pack","FormData","current","append","ref","htmlFor","_objectSpread","type","validators","firstName","surName","placeholder","phone","email","dob","address","city","state","zip","loadHandler","src","part","part_img_url","alt","name","onLoad","onError","href","target","part_num","minifigID","useGetPartsQuery","skip","isOffline","parts","isFetching","refImages","after","length","classList","add","isEmpty","map","partData","uuid","getSelectedMinifig","num","num_parts","url","set_img_url","partsInfo","imageURL","form","fetch","isMessage","Order_Page"],"sourceRoot":""}