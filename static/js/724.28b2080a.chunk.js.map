{"version":3,"file":"static/js/724.28b2080a.chunk.js","mappings":"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","sources":["pages/Order_Page/components/Message.tsx","pages/Order_Page/components/NoParts.tsx","pages/Order_Page/utils/validationUtils.ts","pages/Order_Page/components/Order_Details/FormField.tsx","fixtures/fixtures.ts","pages/Order_Page/components/Order_Details/index.ts","reduxware/thunks/sendOrder.ts","pages/Order_Page/components/Order_Details/Order_Details.tsx","pages/Order_Page/components/Part.tsx","pages/Order_Page/components/Parts/index.tsx","pages/Order_Page/components/Parts/Parts.tsx","pages/Order_Page/components/Summary/Summary_Header.tsx","pages/Order_Page/components/Summary/Summary.tsx","pages/Order_Page/Order_Page.tsx","pages/Order_Page/index.ts"],"sourcesContent":["interface Props {\r\n    message: string;\r\n}\r\n\r\nconst Message = (props: Props): JSX.Element => {\r\n    const { message } = props;\r\n\r\n    return (\r\n        <article className=\"error\">\r\n            <div className=\"message\">\r\n                <p className=\"message__general-message\">Hi, &#128512;</p>\r\n                <hr />\r\n                <div className=\"message__error-message\">{message ? message : \"\"}</div>\r\n            </div>\r\n        </article>\r\n    );\r\n};\r\n\r\nexport default Message;\r\n","import React from \"react\";\r\n\r\nconst NoParts = React.memo(() => {\r\n    return <div>It seems that Dementors sucked all the parts &#128553;</div>;\r\n});\r\n\r\nexport default NoParts;\r\n","import { RegisterOptions } from \"react-hook-form\";\n\nexport const inputFields = [\"firstName\", \"surName\", \"phone\", \"email\", \"dob\", \"address\", \"city\", \"state\", \"zip\"];\nexport type Fields = (typeof inputFields)[number];\nexport type InputFields = typeof inputFields;\nexport type KeysOfRegisterOptions = keyof RegisterOptions;\nexport interface validationResult {\n    isError: Boolean;\n    errorMessage: string;\n}\n\nexport type Messages = { [key in KeysOfRegisterOptions]?: string };\n\nexport const messages: Messages = {\n    minLength: \"Minimal length not reached, should be at least \",\n    maxLength: \"Max length exceeded \",\n    required: \"This field is required \",\n    pattern: \"Text does not meet country pattern \",\n};\nexport const placeholders: { [key in Fields]?: string } = {\n    phone: \"Mobile or regular Polish phone with country code like 048 669086566\",\n    dob: \"Date in yyyy-mm-dd or yyyy-m-dd format\",\n    zip: \"zip code in format xx-xxx\",\n};\nexport const labels: { [key in Fields]: string } = {\n    firstName: \"Name\",\n    surName: \"Surname\",\n    address: \"Address\",\n    zip: \"Zip Code\",\n    dob: \"Date of Birth\",\n    phone: \"Phone Number\",\n    email: \"E-mail\",\n    city: \"City\",\n    state: \"State\",\n};\nconst FIRSTNAME_MIN_LENGTH = 2;\nconst SURNAME_MIN_LENGTH = 2;\nconst FIRSTNAME_MAX_LENGTH = 45;\nconst SURNAME_MAX_LENGTH = 45;\nconst PATTERN = \"String does not satisfy the pattern: \";\nconst STATE_MIN_LENGTH = 2;\nconst CITY_MIN_LENGTH = 2;\nconst REQUIRED = \"This field is required\";\n\nconst regex = {\n    address: /[A-Za-z0-9'\\.\\-\\s\\,]/,\n    city: /^([ \\u00c0-\\u01ffa-zA-Z'\\-])+$/,\n    dob: /^\\d{4}\\-(0?[1-9]|1[012])\\-(0?[1-9]|[12][0-9]|3[01])$/,\n    email: /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/,\n    firstName: /^([ \\u00c0-\\u01ffa-zA-Z'\\-])+$/,\n    state: /^([ \\u00c0-\\u01ffa-zA-Z'\\-])+$/,\n    surName: /^([ \\u00c0-\\u01ffa-zA-Z'-])+$/,\n    phone: /(?:(?:(?:\\+|00)?48)|(?:\\(\\+?48\\)))?(?:1[2-8]|2[2-69]|3[2-49]|4[1-8]|5[0-9]|6[0-35-9]|[7-8][1-9]|9[145])\\d{7}/,\n    zip: /^[0-9]{2}-[0-9]{3}/,\n};\n\nexport const validators: { [key in Fields]?: Partial<Record<KeysOfRegisterOptions, any>> } = {\n    firstName: {\n        minLength: { value: FIRSTNAME_MIN_LENGTH, message: `This input requests not less then ${FIRSTNAME_MIN_LENGTH} chars` },\n        maxLength: { value: FIRSTNAME_MAX_LENGTH, message: `This input exceed length of ${FIRSTNAME_MAX_LENGTH} chars` },\n        pattern: { value: regex.firstName, message: `${PATTERN}${regex.firstName}` },\n        required: { value: true, message: REQUIRED },\n    },\n    surName: {\n        required: { value: true, message: REQUIRED },\n        minLength: { value: SURNAME_MIN_LENGTH, message: `This input requests not less then ${SURNAME_MIN_LENGTH} chars` },\n        maxLength: { value: SURNAME_MAX_LENGTH, message: `This input exceed length of ${SURNAME_MAX_LENGTH} chars` },\n        pattern: { value: regex.surName, message: `${PATTERN}${regex.surName}` },\n    },\n    phone: {\n        required: { value: true, message: REQUIRED },\n        pattern: { value: regex.phone, message: `${PATTERN}${regex.surName}` },\n    },\n    email: {\n        required: { value: true, message: REQUIRED },\n        pattern: { value: regex.email, message: `${PATTERN}${regex.email}` },\n    },\n    dob: {\n        required: { value: false, message: REQUIRED },\n        pattern: { value: regex.dob, message: `${PATTERN}${regex.dob}` },\n    },\n    address: {\n        required: { value: true, message: REQUIRED },\n        pattern: { value: regex.address, message: `${PATTERN}${regex.address}` },\n    },\n    city: {\n        required: { value: true, message: REQUIRED },\n        minLength: { value: STATE_MIN_LENGTH, message: `This input requests not less then ${CITY_MIN_LENGTH} chars` },\n        pattern: { value: regex.city, message: `${PATTERN}${regex.city}` },\n    },\n    state: {\n        required: { value: true, message: REQUIRED },\n        minLength: { value: STATE_MIN_LENGTH, message: `This input requests not less then ${STATE_MIN_LENGTH} chars` },\n        pattern: { value: regex.state, message: `${PATTERN}${regex.state}` },\n    },\n    zip: {\n        pattern: { value: regex.zip, message: `${PATTERN}${regex.zip}` },\n        required: { value: true, message: REQUIRED },\n    },\n};\n\n// export type Validator = { [key in KeysOfRegisterOptions]?: RegisterOptions[key] };\n","import { labels, placeholders, validators } from \"pages/Order_Page/utils/validationUtils\";\nimport { FieldErrorsImpl, FieldValues, UseFormRegister } from \"react-hook-form/dist/types\";\nimport { ErrorMessage } from \"@hookform/error-message\";\n\ninterface Props {\n    errors: Partial<\n        FieldErrorsImpl<{\n            [x: string]: any;\n        }>\n    >;\n\n    name: string;\n    register: UseFormRegister<FieldValues>;\n    variant: \"short\" | \"regular\" | \"extendable\";\n}\n\nexport const FormField = (props: Props) => {\n    const { errors, name, register, variant } = props;\n\n    let cls: string;\n\n    switch (variant) {\n        case \"extendable\":\n            cls = \"form-item extendable\";\n            break;\n        case \"regular\":\n            cls = \"form-item full-width\";\n            break;\n        case \"short\":\n            cls = \"form-item\";\n            break;\n        default:\n            cls = \"form-item full-width\";\n    }\n\n    return (\n        <div className={cls}>\n            <label className=\"required\" htmlFor={name}>\n                {labels[name]}\n            </label>\n            <input id={name} type=\"text\" placeholder={placeholders[name] || \"\"} {...register(name, validators[name])} />\n            <ErrorMessage errors={errors} name={name} as=\"span\" />\n        </div>\n    );\n};\n\nexport default FormField;\n\n/** label classname required prawdopodobnie do wyrzucenia */\n","export const FORM_ID = \"minifigs-ordr-form-id\";\r\n","import { connect } from \"react-redux\";\r\nimport { OrderDetails } from \"./Order_Details\";\r\nimport { sendOrder } from \"reduxware/thunks/sendOrder\";\r\n\r\nimport { NavigateFunction } from \"react-router-dom\";\r\nimport { UseMessage } from \"hooks/useMessage\";\r\n\r\nconst mapDispatchToProps = (dispatch: Function) => ({\r\n    sendOrder: (navigate: NavigateFunction, showMessage: UseMessage, data: FormData) => dispatch(sendOrder(navigate, showMessage, data)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(OrderDetails);\r\n","import { ThunkAction } from \"redux-thunk\";\r\nimport { Action } from \"redux\";\r\nimport { NavigateFunction } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\nimport { showError } from \"../actionCreators\";\r\nimport { RootStateType, ShowError } from \"types\";\r\nimport { Paths } from \"routes/paths\";\r\nimport { UseMessage } from \"hooks/useMessage\";\r\n\r\nconst URL = \"https://jsonplaceholder.typicode.com/posts\";\r\n\r\nconst SWITCH_TIMEOUT = 5000;\r\n\r\nexport const sendOrder = (navigate: NavigateFunction, showMessage: UseMessage, data: FormData): ThunkAction<void, RootStateType, unknown, Action> => {\r\n    const options = {\r\n        headers: {\r\n            \"Content-type\": \"application/json; charset=UTF-8\",\r\n        },\r\n    };\r\n\r\n    return async dispatch => {\r\n        axios\r\n            .post(URL, data, options)\r\n            .then(data => {\r\n                if (data) {\r\n                    try {\r\n                        showMessage.success(\"Your order has been successfully proceeded\");\r\n                        setTimeout(() => navigate(Paths.intro), SWITCH_TIMEOUT);\r\n                    } catch (error) {\r\n                        dispatch(showError({ isError: true, errorMessage: \"Error occured during order placing\" }));\r\n                    }\r\n                } else {\r\n                    dispatch(showError({ isError: true, errorMessage: \"Empty data received from receiver's endpoint\" }));\r\n                }\r\n            })\r\n            .catch(error => {\r\n                let result: ShowError;\r\n                if (axios.isAxiosError(error)) {\r\n                    result = {\r\n                        isError: true,\r\n                        errorMessage: \"The following error occured when placing order: \" + error.message,\r\n                    };\r\n                } else {\r\n                    result = {\r\n                        isError: true,\r\n                        errorMessage: \"Unknown error occured when placing order\",\r\n                    };\r\n                }\r\n\r\n                dispatch(showError(result));\r\n            });\r\n    };\r\n};\r\nexport type SendOrder = typeof sendOrder;\r\n","import { useRef } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nimport FormField from \"./FormField\";\r\n\r\nimport { getSelectedMinifigNumber } from \"reduxware/selectors\";\r\nimport { FORM_ID } from \"fixtures\";\r\nimport { SendOrder } from \"types\";\r\nimport { useMessage } from \"hooks\";\r\n\r\ninterface Props {\r\n    sendOrder: SendOrder;\r\n}\r\nexport const OrderDetails = (props: Props) => {\r\n    const { sendOrder } = props;\r\n    const minifigSetNumber = useSelector(getSelectedMinifigNumber);\r\n    const refForm = useRef<HTMLFormElement>(null);\r\n    const navigate = useNavigate();\r\n    const showMessage = useMessage();\r\n\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors },\r\n    } = useForm();\r\n\r\n    const onFormSubmit = () => {\r\n        const pack = new FormData(refForm.current as HTMLFormElement);\r\n        if (minifigSetNumber) {\r\n            pack.append(\"setNumber\", minifigSetNumber);\r\n            pack && sendOrder(navigate, showMessage, pack);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <form className=\"details\" id={FORM_ID} onSubmit={handleSubmit(onFormSubmit)} ref={refForm}>\r\n                <h1 className=\"fromLeft\">Shipping details</h1>\r\n                <div className=\"foo\" id=\"foo\"></div>\r\n\r\n                <FormField errors={errors} variant=\"extendable\" register={register} name=\"firstName\" />\r\n\r\n                <FormField errors={errors} variant=\"extendable\" register={register} name=\"surName\" />\r\n\r\n                <FormField errors={errors} variant=\"regular\" register={register} name=\"phone\" />\r\n\r\n                <FormField errors={errors} variant=\"regular\" register={register} name=\"email\" />\r\n\r\n                <FormField errors={errors} variant=\"regular\" register={register} name=\"dob\" />\r\n\r\n                <FormField errors={errors} variant=\"regular\" register={register} name=\"address\" />\r\n\r\n                <FormField errors={errors} variant=\"regular\" register={register} name=\"city\" />\r\n\r\n                <FormField errors={errors} variant=\"short\" register={register} name=\"state\" />\r\n\r\n                <FormField errors={errors} variant=\"short\" register={register} name=\"zip\" />\r\n            </form>\r\n        </>\r\n    );\r\n};\r\n","import { ReactEventHandler } from \"react\";\r\nimport { PartsItem } from \"types\";\r\n\r\ninterface Props {\r\n    data: PartsItem;\r\n    loadHandler?: ReactEventHandler<HTMLImageElement>;\r\n}\r\nconst Part = (props: Props) => {\r\n    const { data, loadHandler } = props;\r\n\r\n    return (\r\n        <div className=\"part\">\r\n            <img className=\"part__image\" src={data.part.part_img_url} alt={data.part.name} onLoad={loadHandler} onError={loadHandler}></img>\r\n            <div className=\"part__text-items\">\r\n                <div className=\"part__item part__name\">{data.part.name}</div>\r\n                <a className=\"part__item part__code\" href={data.part.part_img_url} target=\"blank\">\r\n                    {data.part.part_num}\r\n                </a>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Part;\r\n","import { Parts } from \"./Parts\";\r\n\r\nexport default Parts;\r\n","import uuid from \"react-uuid\";\r\n\r\nimport { after, isEmpty } from \"lodash\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useRef } from \"react\";\r\n\r\nimport { LoadingIndicator } from \"components\";\r\nimport { Part, NoParts } from \"../../components\";\r\nimport { PartsItem } from \"types\";\r\nimport { isOffline } from \"functions\";\r\nimport { useGetPartsQuery } from \"../../utils/partsApi\";\r\nimport { getSelectedMinifigNumber } from \"reduxware/selectors\";\r\n\r\nexport const Parts = () => {\r\n    const minifigID = useSelector(getSelectedMinifigNumber);\r\n    const { data: parts, isFetching, isError } = useGetPartsQuery(minifigID, { skip: isOffline() });\r\n    const refImages = useRef<HTMLDivElement>(null);\r\n\r\n    const onLoad = parts\r\n        ? after(parts.length, () => {\r\n              refImages.current?.classList.add(\"active\");\r\n          })\r\n        : () => {};\r\n\r\n    if (isFetching) return <LoadingIndicator />;\r\n    if (isError) return <NoParts />;\r\n\r\n    return parts && !isEmpty(parts) ? (\r\n        <div className=\"parts\" ref={refImages}>\r\n            {parts.map((partData: PartsItem) => {\r\n                return <Part data={partData} key={uuid()} loadHandler={onLoad} />;\r\n            })}\r\n        </div>\r\n    ) : (\r\n        <NoParts />\r\n    );\r\n};\r\n","import { Picture, Name } from \"components\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getSelectedMinifig } from \"reduxware/selectors\";\r\n\r\nexport const SummaryHeader = () => {\r\n    const minifig = useSelector(getSelectedMinifig);\r\n    if (!minifig) return null;\r\n    const { name, num_parts: num, set_img_url: url } = minifig;\r\n    const partsInfo = `There are ${num} parts in this minifig:`;\r\n\r\n    return (\r\n        <div className=\"summary__main items\">\r\n            <h2 className=\"black fromLeft\">Summary</h2>\r\n            <div className=\"minifigCard minifigCard--no-padding\">\r\n                {name && url && <Picture name={name} imageURL={url} />}\r\n                {name && <Name name={name} />}\r\n            </div>\r\n            {num && <p>{partsInfo}</p>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SummaryHeader;\r\n","import { BasicButton } from \"components\";\r\nimport { Parts } from \"../../components\";\r\nimport SummaryHeader from \"./Summary_Header\";\r\nimport { FORM_ID } from \"fixtures\";\r\n\r\nconst Summary = () => {\r\n    return (\r\n        <div className=\"summary\">\r\n            <SummaryHeader />\r\n            <Parts />\r\n            <BasicButton className=\"button uppercased\" type=\"submit\" form={FORM_ID}>\r\n                Submit\r\n            </BasicButton>\r\n        </div>\r\n    );\r\n};\r\nexport default Summary;\r\n","import { OrderDetails, Message, Summary } from \"./components\";\r\nimport { isOffline } from \"functions\";\r\n\r\nconst Order_Page = () => {\r\n    if (isOffline()) return <Message message={\"No Internet connection, try again some later\"} />;\r\n    return (\r\n        <main className=\"order\">\r\n            <OrderDetails />\r\n            <Summary />\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default Order_Page;\r\n","import { connect } from \"react-redux\";\r\nimport { RootStateType } from \"types\";\r\n\r\nimport Order_Page from \"./Order_Page\";\r\n\r\nconst mapStateToProps = (state: RootStateType) => ({\r\n    message: state.fetch.message,\r\n    isMessage: state.fetch.isMessage,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(Order_Page);\r\n"],"names":["props","message","_jsx","className","children","_jsxs","React","placeholders","phone","dob","zip","labels","firstName","surName","address","email","city","state","PATTERN","REQUIRED","regex","validators","minLength","value","concat","maxLength","pattern","required","cls","errors","name","register","variant","htmlFor","_objectSpread","id","type","placeholder","ErrorMessage","as","FORM_ID","connect","dispatch","sendOrder","navigate","showMessage","data","options","headers","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","_context","prev","next","axios","post","then","success","setTimeout","Paths","intro","error","showError","isError","errorMessage","catch","result","isAxiosError","stop","_x","apply","arguments","minifigSetNumber","useSelector","getSelectedMinifigNumber","refForm","useRef","useNavigate","useMessage","_useForm","useForm","handleSubmit","formState","_Fragment","onSubmit","pack","FormData","current","append","ref","FormField","loadHandler","src","part","part_img_url","alt","onLoad","onError","href","target","part_num","minifigID","_useGetPartsQuery","useGetPartsQuery","skip","isOffline","parts","isFetching","refImages","after","length","_refImages$current","classList","add","LoadingIndicator","NoParts","isEmpty","map","partData","Part","uuid","minifig","getSelectedMinifig","num","num_parts","url","set_img_url","partsInfo","Picture","imageURL","Name","SummaryHeader","Parts","BasicButton","form","Message","OrderDetails","Summary","fetch","isMessage","Order_Page"],"sourceRoot":""}