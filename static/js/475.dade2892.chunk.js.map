{"version":3,"file":"static/js/475.dade2892.chunk.js","mappings":"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","sources":["pages/Order_Page/components/Message.tsx","pages/Order_Page/components/NoParts.tsx","fixtures/fixtures.ts","pages/Order_Page/components/Order_Details/ErrorMessage.tsx","pages/Order_Page/components/Order_Details/index.ts","reduxware/thunks/sendOrder.ts","pages/Order_Page/components/Order_Details/Order_Details.tsx","pages/Order_Page/components/Part.tsx","pages/Order_Page/components/Parts/index.tsx","pages/Order_Page/components/Parts/Parts.tsx","pages/Order_Page/components/Summary/Summary_Header.tsx","pages/Order_Page/components/Summary/Summary.tsx","pages/Order_Page/Order_Page.tsx","pages/Order_Page/index.ts"],"sourcesContent":["interface Props {\r\n    message: string;\r\n}\r\n\r\nconst Message = (props: Props): JSX.Element => {\r\n    const { message } = props;\r\n\r\n    return (\r\n        <article className=\"error\">\r\n            <div className=\"message\">\r\n                <p className=\"message__general-message\">Hi, &#128512;</p>\r\n                <hr />\r\n                <div className=\"message__error-message\">{message ? message : \"\"}</div>\r\n            </div>\r\n        </article>\r\n    );\r\n};\r\n\r\nexport default Message;\r\n","import React from \"react\";\r\n\r\nconst NoParts = React.memo(() => {\r\n    return <div>It seems that Dementors sucked all the parts &#128553;</div>;\r\n});\r\n\r\nexport default NoParts;\r\n","export const FORM_ID = \"minifigs-ordr-form-id\";\r\n","import { validationResult } from \"pages/Order_Page/utils/validationUtils\";\n\ninterface Props {\n    result: validationResult;\n}\nexport const ErrorMessage = (props: Props) => {\n    const { result } = props;\n    if (!result) return null;\n\n    return result.isError && <span>{result.errorMessage}</span>;\n};\n\nexport default ErrorMessage;\n","import { connect } from \"react-redux\";\r\nimport { OrderDetails } from \"./Order_Details\";\r\nimport { sendOrder } from \"reduxware/thunks/sendOrder\";\r\n\r\nimport { NavigateFunction } from \"react-router-dom\";\r\nimport { UseMessage } from \"hooks/useMessage\";\r\n\r\nconst mapDispatchToProps = (dispatch: Function) => ({\r\n    sendOrder: (navigate: NavigateFunction, showMessage: UseMessage, data: FormData) => dispatch(sendOrder(navigate, showMessage, data)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(OrderDetails);\r\n","import { ThunkAction } from \"redux-thunk\";\r\nimport { Action } from \"redux\";\r\nimport { NavigateFunction } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\nimport { showError } from \"../actionCreators\";\r\nimport { RootStateType, ShowError } from \"types\";\r\nimport { Paths } from \"routes/paths\";\r\nimport { UseMessage } from \"hooks/useMessage\";\r\n\r\nconst URL = \"https://jsonplaceholder.typicode.com/posts\";\r\n\r\nconst SWITCH_TIMEOUT = 5000;\r\n\r\nexport const sendOrder = (navigate: NavigateFunction, showMessage: UseMessage, data: FormData): ThunkAction<void, RootStateType, unknown, Action> => {\r\n    const options = {\r\n        headers: {\r\n            \"Content-type\": \"application/json; charset=UTF-8\",\r\n        },\r\n    };\r\n\r\n    return async dispatch => {\r\n        axios\r\n            .post(URL, data, options)\r\n            .then(data => {\r\n                if (data) {\r\n                    try {\r\n                        showMessage.success(\"Your order has been successfully proceeded\");\r\n                        setTimeout(() => navigate(Paths.intro), SWITCH_TIMEOUT);\r\n                    } catch (error) {\r\n                        dispatch(showError({ isError: true, errorMessage: \"Error occured during order placing\" }));\r\n                    }\r\n                } else {\r\n                    dispatch(showError({ isError: true, errorMessage: \"Empty data received from receiver's endpoint\" }));\r\n                }\r\n            })\r\n            .catch(error => {\r\n                let result: ShowError;\r\n                if (axios.isAxiosError(error)) {\r\n                    result = {\r\n                        isError: true,\r\n                        errorMessage: \"The following error occured when placing order: \" + error.message,\r\n                    };\r\n                } else {\r\n                    result = {\r\n                        isError: true,\r\n                        errorMessage: \"Unknown error occured when placing order\",\r\n                    };\r\n                }\r\n\r\n                dispatch(showError(result));\r\n            });\r\n    };\r\n};\r\nexport type SendOrder = typeof sendOrder;\r\n","import { useForm } from \"react-hook-form\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useMemo, useRef } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getSelectedMinifigNumber } from \"reduxware/selectors\";\r\n\r\nimport { FORM_ID } from \"fixtures\";\r\nimport { SendOrder } from \"types\";\r\nimport { useMessage, useValidationResults } from \"hooks\";\r\nimport { Errors, inputFields, validators } from \"../../utils/validationUtils\";\r\n\r\nimport ErrorMessage from \"./ErrorMessage\";\r\n\r\ninterface Props {\r\n    sendOrder: SendOrder;\r\n}\r\nexport const OrderDetails = (props: Props) => {\r\n    const { sendOrder } = props;\r\n    const minifigSetNumber = useSelector(getSelectedMinifigNumber);\r\n    const refForm = useRef<HTMLFormElement>(null);\r\n    const navigate = useNavigate();\r\n    const showMessage = useMessage();\r\n\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors },\r\n    } = useForm();\r\n\r\n    const onFormSubmit = () => {\r\n        const pack = new FormData(refForm.current as HTMLFormElement);\r\n        if (minifigSetNumber) {\r\n            pack.append(\"setNumber\", minifigSetNumber);\r\n            pack && sendOrder(navigate, showMessage, pack);\r\n        }\r\n    };\r\n\r\n    const fixedErrors = useMemo(() => errors, [errors]);\r\n    const validationResults = useValidationResults(fixedErrors as Errors, inputFields) as any;\r\n\r\n    return (\r\n        <>\r\n            <form className=\"details\" id={FORM_ID} onSubmit={handleSubmit(onFormSubmit)} ref={refForm}>\r\n                <h1 className=\"fromLeft\">Shipping details</h1>\r\n                <div className=\"foo\" id=\"foo\"></div>\r\n                {/**Firstname */}\r\n                <div className=\"form-item extendable\">\r\n                    <label className=\"required\" htmlFor=\"firstName\">\r\n                        Name\r\n                    </label>\r\n                    <input type=\"text\" {...register(\"firstName\", validators.firstName)} id=\"firstName\" />\r\n                    {validationResults && <ErrorMessage result={validationResults.firstName} />}\r\n                </div>\r\n                {/* <FormField isExtendable={true} name={\"firstName\"} register={register} validationResults={validationResults} validator={validators[\"firstName\"]} /> */}\r\n\r\n                {/**Surname */}\r\n\r\n                <div className=\"form-item extendable\">\r\n                    <label className=\"required\" htmlFor=\"Surname\">\r\n                        Surname\r\n                    </label>\r\n                    <input id=\"Surname\" type=\"text\" {...register(\"surName\", validators.surName)} />\r\n                    {validationResults && <ErrorMessage result={validationResults.surName} />}\r\n                </div>\r\n\r\n                {/**Phone */}\r\n\r\n                <div className=\"form-item full-width\">\r\n                    <label className=\"required\" htmlFor=\"Phone\">\r\n                        Phone Number\r\n                    </label>\r\n                    <input id=\"Phone\" placeholder=\"Mobile or regular Polish phone with country code like 048 669086566\" type=\"text\" {...register(\"phone\", validators.phone)} />\r\n                    {validationResults && <ErrorMessage result={validationResults.phone} />}\r\n                </div>\r\n\r\n                {/**Email */}\r\n\r\n                <div className=\"form-item full-width\">\r\n                    <label className=\"required\" htmlFor=\"email\">\r\n                        Email\r\n                    </label>\r\n                    <input id=\"email\" type=\"text\" {...register(\"email\", validators.email)} />\r\n                    {validationResults && <ErrorMessage result={validationResults.email} />}\r\n                </div>\r\n\r\n                {/**Date of Birth */}\r\n\r\n                <div className=\"form-item full-width\">\r\n                    <label htmlFor=\"DoB\">Date of Birth</label>\r\n                    <input id=\"DoB\" placeholder=\"Date in yyyy-mm-dd or yyyy-m-dd format \" type=\"text\" {...register(\"dob\", validators.dob)} />\r\n                    {validationResults && <ErrorMessage result={validationResults.dob} />}\r\n                </div>\r\n\r\n                <div className=\"form-item full-width\">\r\n                    <label className=\"required\" htmlFor=\"address\">\r\n                        Address\r\n                    </label>\r\n                    <input type=\"text\" id=\"address\" {...register(\"address\", validators.address)} />\r\n                    {validationResults && <ErrorMessage result={validationResults.address} />}\r\n                </div>\r\n\r\n                {/**City */}\r\n\r\n                <div className=\"form-item full-width\">\r\n                    <label className=\"required\" htmlFor=\"city\">\r\n                        City\r\n                    </label>\r\n                    <input type=\"text\" id=\"city\" {...register(\"city\", validators.city)} />\r\n                    {validationResults && <ErrorMessage result={validationResults.city} />}\r\n                </div>\r\n\r\n                {/**State */}\r\n\r\n                <div className=\"form-item\">\r\n                    <label className=\"required\" htmlFor=\"state\">\r\n                        State\r\n                    </label>\r\n                    <input type=\"text\" id=\"state\" {...register(\"state\", validators.state)} />\r\n                </div>\r\n\r\n                {/**Zip Code */}\r\n\r\n                <div className=\"form-item\">\r\n                    <label className=\"required\" htmlFor=\"ZipCode\">\r\n                        Zip Code\r\n                    </label>\r\n                    <input id=\"ZipCode\" type=\"text\" placeholder=\" zip code in format xx-xxx\" {...register(\"zip\", validators.zip)} />\r\n                    {validationResults && <ErrorMessage result={validationResults.zip} />}\r\n                </div>\r\n            </form>\r\n        </>\r\n    );\r\n};\r\n\r\n/** label classname required prawdopodobnie do wyrzucenia */\r\n","import { ReactEventHandler } from \"react\";\r\nimport { PartsItem } from \"types\";\r\n\r\ninterface Props {\r\n    data: PartsItem;\r\n    loadHandler?: ReactEventHandler<HTMLImageElement>;\r\n}\r\nconst Part = (props: Props) => {\r\n    const { data, loadHandler } = props;\r\n\r\n    return (\r\n        <div className=\"part\">\r\n            <img className=\"part__image\" src={data.part.part_img_url} alt={data.part.name} onLoad={loadHandler} onError={loadHandler}></img>\r\n            <div className=\"part__text-items\">\r\n                <div className=\"part__item part__name\">{data.part.name}</div>\r\n                <a className=\"part__item part__code\" href={data.part.part_img_url} target=\"blank\">\r\n                    {data.part.part_num}\r\n                </a>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Part;\r\n","import { Parts } from \"./Parts\";\r\n\r\nexport default Parts;\r\n","import uuid from \"react-uuid\";\r\n\r\nimport { after, isEmpty } from \"lodash\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useRef } from \"react\";\r\n\r\nimport { LoadingIndicator } from \"components\";\r\nimport { Part, NoParts } from \"../../components\";\r\nimport { PartsItem } from \"types\";\r\nimport { isOffline } from \"functions\";\r\nimport { useGetPartsQuery } from \"../../utils/partsApi\";\r\nimport { getSelectedMinifigNumber } from \"reduxware/selectors\";\r\n\r\nexport const Parts = () => {\r\n    const minifigID = useSelector(getSelectedMinifigNumber);\r\n    const { data: parts, isFetching, isError } = useGetPartsQuery(minifigID, { skip: isOffline() });\r\n    const refImages = useRef<HTMLDivElement>(null);\r\n\r\n    const onLoad = parts\r\n        ? after(parts.length, () => {\r\n              refImages.current?.classList.add(\"active\");\r\n          })\r\n        : () => {};\r\n\r\n    if (isFetching) return <LoadingIndicator />;\r\n    if (isError) return <NoParts />;\r\n\r\n    return parts && !isEmpty(parts) ? (\r\n        <div className=\"parts\" ref={refImages}>\r\n            {parts.map((partData: PartsItem) => {\r\n                return <Part data={partData} key={uuid()} loadHandler={onLoad} />;\r\n            })}\r\n        </div>\r\n    ) : (\r\n        <NoParts />\r\n    );\r\n};\r\n","import { Picture, Name } from \"components\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getSelectedMinifig } from \"reduxware/selectors\";\r\n\r\nexport const SummaryHeader = () => {\r\n    const minifig = useSelector(getSelectedMinifig);\r\n    if (!minifig) return null;\r\n    const { name, num_parts: num, set_img_url: url } = minifig;\r\n    const partsInfo = `There are ${num} parts in this minifig:`;\r\n\r\n    return (\r\n        <div className=\"summary__main items\">\r\n            <h2 className=\"black fromLeft\">Summary</h2>\r\n            <div className=\"minifigCard minifigCard--no-padding\">\r\n                {name && url && <Picture name={name} imageURL={url} />}\r\n                {name && <Name name={name} />}\r\n            </div>\r\n            {num && <p>{partsInfo}</p>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SummaryHeader;\r\n","import { BasicButton } from \"components\";\r\nimport { Parts } from \"../../components\";\r\nimport SummaryHeader from \"./Summary_Header\";\r\nimport { FORM_ID } from \"fixtures\";\r\n\r\nconst Summary = () => {\r\n    return (\r\n        <div className=\"summary\">\r\n            <SummaryHeader />\r\n            <Parts />\r\n            <BasicButton className=\"button uppercased\" type=\"submit\" form={FORM_ID}>\r\n                Submit\r\n            </BasicButton>\r\n        </div>\r\n    );\r\n};\r\nexport default Summary;\r\n","import { OrderDetails, Message, Summary } from \"./components\";\r\nimport { isOffline } from \"functions\";\r\n\r\nconst Order_Page = () => {\r\n    if (isOffline()) return <Message message={\"No Internet connection, try again some later\"} />;\r\n    return (\r\n        <main className=\"order\">\r\n            <OrderDetails />\r\n            <Summary />\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default Order_Page;\r\n","import { connect } from \"react-redux\";\r\nimport { RootStateType } from \"types\";\r\n\r\nimport Order_Page from \"./Order_Page\";\r\n\r\nconst mapStateToProps = (state: RootStateType) => ({\r\n    message: state.fetch.message,\r\n    isMessage: state.fetch.isMessage,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(Order_Page);\r\n"],"names":["props","message","className","React","FORM_ID","result","isError","_jsx","children","errorMessage","connect","dispatch","sendOrder","navigate","showMessage","data","options","headers","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","_context","prev","next","axios","post","then","success","setTimeout","Paths","intro","error","showError","catch","isAxiosError","stop","_x","apply","arguments","minifigSetNumber","useSelector","getSelectedMinifigNumber","refForm","useRef","useNavigate","useMessage","_useForm","useForm","register","handleSubmit","errors","formState","fixedErrors","useMemo","validationResults","useValidationResults","inputFields","_Fragment","_jsxs","id","onSubmit","pack","FormData","current","append","ref","htmlFor","_objectSpread","type","validators","firstName","ErrorMessage","surName","placeholder","phone","email","dob","address","city","state","zip","loadHandler","src","part","part_img_url","alt","name","onLoad","onError","href","target","part_num","minifigID","useGetPartsQuery","skip","isOffline","parts","isFetching","refImages","after","length","classList","add","isEmpty","map","partData","uuid","minifig","getSelectedMinifig","num","num_parts","url","set_img_url","partsInfo","concat","Picture","imageURL","Name","form","fetch","isMessage","Order_Page"],"sourceRoot":""}