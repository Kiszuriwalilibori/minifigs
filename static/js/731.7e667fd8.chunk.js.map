{"version":3,"file":"static/js/731.7e667fd8.chunk.js","mappings":"8QAsCA,EA3B2B,SAACA,GACxB,IAAQC,EAA2DD,EAA3DC,QAASC,EAAkDF,EAAlDE,aAAYC,EAAsCH,EAApCI,WAAAA,OAAU,IAAAD,GAAQA,EAAEE,EAAgBL,EAAhBK,YAE7CC,GAAcC,EAAAA,EAAAA,cAChB,SAACC,GACGA,EAAEC,kBACFP,EAAaD,EACjB,GACA,CAACA,IAECS,GAAwBH,EAAAA,EAAAA,cAAY,SAACC,GACvCA,EAAEC,iBACN,GAAG,IAEH,OACIE,EAAAA,EAAAA,MAAA,OAAKC,UAAWR,EAAa,uBAAyB,cAAeS,QAASP,EAAYQ,SAAA,EACtFH,EAAAA,EAAAA,MAACI,EAAAA,GAAW,CAACH,UAAU,qCAAqCC,QAASP,EAAmBQ,SAAA,EACpFE,EAAAA,EAAAA,KAACC,EAAAA,EAAO,CAACC,SAAUjB,EAAQkB,YAAaC,KAAMnB,EAAQmB,KAAMf,YAAaA,KACzEW,EAAAA,EAAAA,KAACK,EAAAA,GAAI,CAACD,KAAMnB,EAAQmB,WAExBJ,EAAAA,EAAAA,KAAA,KAAGJ,UAAU,cAAc,gCAAAU,OAA+BrB,EAAQmB,KAAI,QAAQG,OAAO,QAAQC,KAAMvB,EAAQwB,QAASC,UAAW,EAAEZ,UAC7HE,EAAAA,EAAAA,KAAA,UAAQH,QAASH,EAAsBI,SAAC,qBAIxD,E,UC4BA,EAhDe,SAACd,GACZ,IAAQ2B,EAAa3B,EAAb2B,SACRC,GAAgCC,EAAAA,EAAAA,UAA0B,CAAC,GAAEC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAtDI,EAAQF,EAAA,GAAEG,EAAWH,EAAA,GACtBI,GAAYC,EAAAA,EAAAA,QAAuB,MACnCC,GAAUC,EAAAA,EAAAA,MACRC,GAAyBC,EAAAA,EAAAA,MAAzBD,qBAEFE,GAAgBjC,EAAAA,EAAAA,cAAY,SAACN,GAC/BgC,EAAYhC,EAEhB,GAAG,IAGGwC,GAASlC,EAAAA,EAAAA,cACXmC,EAAAA,EAAAA,OAAMf,EAASgB,QAAQ,WAAO,IAADC,EACR,QAAjBA,EAAAV,EAAUW,eAAO,IAAAD,GAAjBA,EAAmBE,UAAUC,IAAI,SACrC,IACA,IAGEC,GAAyBzC,EAAAA,EAAAA,cAC3B,SAACC,GACGA,EAAEC,kBACF6B,EAAsBN,EAAqBiB,SAC3Cb,EAAQc,EAAAA,EAAMC,MAClB,GACA,CAACnB,IAGL,OACIhB,EAAAA,EAAAA,KAAA,QAAMJ,UAAU,SAAQE,UACpBH,EAAAA,EAAAA,MAAA,OAAKC,UAAU,sBAAqBE,SAAA,EAChCE,EAAAA,EAAAA,KAAA,MAAAF,SAAI,yBACJE,EAAAA,EAAAA,KAAA,OAAKJ,UAAU,SAASwC,IAAKlB,EAAUpB,SAClCa,GACGA,EAAS0B,KAAI,SAAAC,GACT,IAAMC,EAAcC,IAAQF,EAAKtB,GACjC,OAAOsB,IAAOtC,EAAAA,EAAAA,KAACyC,EAAW,CAAcxD,QAASqD,EAAKpD,aAAcsC,EAAepC,WAAYmD,EAAalD,YAAaoC,GAAzFiB,MACpC,OAER1C,EAAAA,EAAAA,KAACD,EAAAA,GAAW,CAAC4C,UAAUC,EAAAA,EAAAA,SAAQ5B,GAAWpB,UAAU,oBAAoBC,QAASmC,EAAuBlC,SAAC,4BAMzH,ECrDA,GAAe+C,EAAAA,EAAAA,KAJS,SAACC,GAAoB,MAAM,CAC/CnC,SAAUmC,EAAMC,KAAKpC,SACxB,GAEuC,CAAC,EAAzC,CAA4CqC,E","sources":["pages/Select_Page/components/MinifigCard.tsx","pages/Select_Page/Select.tsx","pages/Select_Page/index.ts"],"sourcesContent":["import { Minifig, SelectedMinifig } from \"types\";\r\nimport { BasicButton, Name, Picture } from \"components\";\r\nimport { ReactEventHandler, useCallback } from \"react\";\r\n\r\ninterface Props {\r\n    minifig: Minifig;\r\n    clickHandler: (minifig: SelectedMinifig) => void;\r\n    isSelected?: boolean;\r\n    loadHandler: ReactEventHandler<HTMLImageElement>;\r\n}\r\n\r\nexport const MinifigCard = (props: Props) => {\r\n    const { minifig, clickHandler, isSelected = false, loadHandler } = props;\r\n\r\n    const handleClick = useCallback(\r\n        (e: React.MouseEvent<HTMLDivElement>) => {\r\n            e.stopPropagation();\r\n            clickHandler(minifig);\r\n        },\r\n        [minifig]\r\n    );\r\n    const noActionNoPropagation = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        e.stopPropagation();\r\n    }, []);\r\n\r\n    return (\r\n        <div className={isSelected ? \"minifigCard selected\" : \"minifigCard\"} onClick={handleClick}>\r\n            <BasicButton className=\"flexbox-column-centered textBlack \" onClick={handleClick as any}>\r\n                <Picture imageURL={minifig.set_img_url} name={minifig.name} loadHandler={loadHandler} />\r\n                <Name name={minifig.name} />\r\n            </BasicButton>\r\n            <a className=\"showDetails\" aria-label={`Show details of ${minifig.name} set`} target=\"blank\" href={minifig.set_url} tabIndex={-1}>\r\n                <button onClick={noActionNoPropagation}>Show Details</button>\r\n            </a>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MinifigCard;\r\n","import uuid from \"react-uuid\";\r\nimport isEqual from \"lodash/isEqual\";\r\n\r\nimport { after, isEmpty } from \"lodash\";\r\nimport { useCallback, useRef, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nimport { useDispatchAction } from \"hooks\";\r\nimport { Minifig, SelectedMinifig } from \"types\";\r\nimport { MinifigCard } from \"./components\";\r\nimport { BasicButton } from \"components\";\r\nimport { Paths } from \"routes/paths\";\r\n\r\ninterface Props {\r\n    minifigs: Minifig[];\r\n}\r\nconst Select = (props: Props) => {\r\n    const { minifigs } = props;\r\n    const [selected, setSelected] = useState<SelectedMinifig>({});\r\n    const refImages = useRef<HTMLDivElement>(null);\r\n    const history = useNavigate();\r\n    const { setSelectedMinifigId } = useDispatchAction();\r\n\r\n    const selectMinifig = useCallback((minifig: SelectedMinifig) => {\r\n        setSelected(minifig);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    const onLoad = useCallback(\r\n        after(minifigs.length, () => {\r\n            refImages.current?.classList.add(\"active\");\r\n        }),\r\n        []\r\n    );\r\n    //todo powyższe z jednej strony sprawia, że ładują sie wszytkie naraz, z drugiej strony jak jest wolne łacze to widać tylko nagłówek i stopkę bez obrazków żadnych za to długo. Jakiś fallback image\r\n    const handleConfirmSelection = useCallback(\r\n        (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n            e.stopPropagation();\r\n            setSelectedMinifigId((selected as Minifig).set_num);\r\n            history(Paths.order);\r\n        },\r\n        [selected]\r\n    );\r\n\r\n    return (\r\n        <main className=\"select\">\r\n            <div className=\"select__content-box\">\r\n                <h1>Choose your minifig</h1>\r\n                <div className=\"images\" ref={refImages}>\r\n                    {minifigs &&\r\n                        minifigs.map(fig => {\r\n                            const wasSelected = isEqual(fig, selected);\r\n                            return fig && <MinifigCard key={uuid()} minifig={fig} clickHandler={selectMinifig} isSelected={wasSelected} loadHandler={onLoad} />;\r\n                        })}\r\n                </div>\r\n                <BasicButton disabled={isEmpty(selected)} className=\"button uppercased\" onClick={handleConfirmSelection}>\r\n                    Proceed to shipment\r\n                </BasicButton>\r\n            </div>\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default Select;\r\n","import { connect } from \"react-redux\";\r\n\r\nimport { RootStateType } from \"types\";\r\nimport Select from \"./Select\";\r\n\r\nconst mapStateToProps = (state: RootStateType) => ({\r\n    minifigs: state.draw.minifigs,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(Select);\r\n"],"names":["props","minifig","clickHandler","_props$isSelected","isSelected","loadHandler","handleClick","useCallback","e","stopPropagation","noActionNoPropagation","_jsxs","className","onClick","children","BasicButton","_jsx","Picture","imageURL","set_img_url","name","Name","concat","target","href","set_url","tabIndex","minifigs","_useState","useState","_useState2","_slicedToArray","selected","setSelected","refImages","useRef","history","useNavigate","setSelectedMinifigId","useDispatchAction","selectMinifig","onLoad","after","length","_refImages$current","current","classList","add","handleConfirmSelection","set_num","Paths","order","ref","map","fig","wasSelected","isEqual","MinifigCard","uuid","disabled","isEmpty","connect","state","draw","Select"],"sourceRoot":""}