{"version":3,"file":"static/js/477.3472eb6b.chunk.js","mappings":"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","sources":["pages/Order_Page/components/Message.tsx","pages/Order_Page/components/NoParts.tsx","fixtures/fixtures.ts","pages/Order_Page/components/Order_Details/utils.ts","pages/Order_Page/components/Order_Details/index.ts","reduxware/thunks/sendOrder.ts","pages/Order_Page/components/Order_Details/Order_Details.tsx","pages/Order_Page/components/Part.tsx","pages/Order_Page/components/Parts/index.tsx","pages/Order_Page/components/Parts/Parts.tsx","pages/Order_Page/components/Summary/Summary_Header.tsx","pages/Order_Page/components/Summary/Summary.tsx","pages/Order_Page/Order_Page.tsx","pages/Order_Page/index.ts"],"sourcesContent":["interface Props {\r\n    message: string;\r\n}\r\n\r\nconst Message = (props: Props): JSX.Element => {\r\n    const { message } = props;\r\n\r\n    return (\r\n        <article className=\"error\">\r\n            <div className=\"message\">\r\n                <p className=\"message__general-message\">Hi, &#128512;</p>\r\n                <hr />\r\n                <div className=\"message__error-message\">{message ? message : \"\"}</div>\r\n            </div>\r\n        </article>\r\n    );\r\n};\r\n\r\nexport default Message;\r\n","import React from \"react\";\r\n\r\nconst NoParts = React.memo(() => {\r\n    return <div>It seems that Dementors sucked all the parts &#128553;</div>;\r\n});\r\n\r\nexport default NoParts;\r\n","export const FORM_ID = \"minifigs-ordr-form-id\";\r\n","import { RegisterOptions } from \"react-hook-form\";\n\ntype Messages = { [key in keyof RegisterOptions]?: string };\n\nexport const messages: Messages = {\n    minLength: \"Minimal length not reached, should be at least \",\n    maxLength: \"Max length exceeded \",\n    required: \"This field is required \",\n    pattern: \"Text does not meet country pattern \",\n};\n\ntype Fields = \"firstName\" | \"surName\" | \"phone\" | \"email\" | \"dob\" | \"address\" | \"city\" | \"state\" | \"zip\";\n\ntype Validator = { [key in keyof RegisterOptions]?: RegisterOptions[key] };\ntype Validators = {\n    [key in Fields]?: Validator;\n};\n\nconst SURNAME_REGEX = /^([ \\u00c0-\\u01ffa-zA-Z'-])+$/;\n\nexport const crits = {\n    firstName: { minLength: 2, maxLength: 45, pattern: /^([ \\u00c0-\\u01ffa-zA-Z'\\-])+$/, required: true },\n    surName: {\n        required: true,\n        minLength: 2,\n        maxLength: 100,\n        pattern: /^([ \\u00c0-\\u01ffa-zA-Z'-])+$/,\n    },\n    phone: {\n        required: true,\n        pattern: /(?:(?:(?:\\+|00)?48)|(?:\\(\\+?48\\)))?(?:1[2-8]|2[2-69]|3[2-49]|4[1-8]|5[0-9]|6[0-35-9]|[7-8][1-9]|9[145])\\d{7}/,\n    },\n    email: {\n        required: true,\n        pattern:\n            /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/,\n    },\n    dob: {\n        required: false,\n        pattern: /^\\d{4}\\-(0?[1-9]|1[012])\\-(0?[1-9]|[12][0-9]|3[01])$/,\n    },\n    address: {\n        required: true,\n        pattern: /[A-Za-z0-9'\\.\\-\\s\\,]/,\n    },\n    city: {\n        required: true,\n        minLength: 2,\n        pattern: /^([ \\u00c0-\\u01ffa-zA-Z'\\-])+$/,\n    },\n    state: {\n        required: true,\n        minLength: 2,\n        pattern: /^([ \\u00c0-\\u01ffa-zA-Z'\\-])+$/,\n    },\n    zip: {\n        pattern: /^[0-9]{2}-[0-9]{3}/,\n        required: true,\n    },\n};\nexport const validators: Validators = {\n    firstName: { ...crits.firstName },\n    surName: { ...crits.surName },\n    phone: { ...crits.phone },\n    email: { ...crits.email },\n    dob: { ...crits.dob },\n    address: { ...crits.address },\n    city: { ...crits.city },\n    state: { ...crits.state },\n    zip: { ...crits.zip },\n};\n","import { connect } from \"react-redux\";\r\nimport { OrderDetails } from \"./Order_Details\";\r\nimport { sendOrder } from \"reduxware/thunks/sendOrder\";\r\n\r\nimport { NavigateFunction } from \"react-router-dom\";\r\nimport { UseMessage } from \"hooks/useMessage\";\r\n\r\nconst mapDispatchToProps = (dispatch: Function) => ({\r\n    sendOrder: (navigate: NavigateFunction, showMessage: UseMessage, data: FormData) => dispatch(sendOrder(navigate, showMessage, data)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(OrderDetails);\r\n","import { ThunkAction } from \"redux-thunk\";\r\nimport { Action } from \"redux\";\r\nimport { NavigateFunction } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\nimport { showError } from \"../actionCreators\";\r\nimport { RootStateType, ShowError } from \"types\";\r\nimport { Paths } from \"routes/paths\";\r\nimport { UseMessage } from \"hooks/useMessage\";\r\n\r\nconst URL = \"https://jsonplaceholder.typicode.com/posts\";\r\n\r\nconst SWITCH_TIMEOUT = 5000;\r\n\r\nexport const sendOrder = (navigate: NavigateFunction, showMessage: UseMessage, data: FormData): ThunkAction<void, RootStateType, unknown, Action> => {\r\n    const options = {\r\n        headers: {\r\n            \"Content-type\": \"application/json; charset=UTF-8\",\r\n        },\r\n    };\r\n\r\n    return async dispatch => {\r\n        axios\r\n            .post(URL, data, options)\r\n            .then(data => {\r\n                if (data) {\r\n                    try {\r\n                        showMessage.success(\"Your order has been successfully proceeded\");\r\n                        setTimeout(() => navigate(Paths.intro), SWITCH_TIMEOUT);\r\n                    } catch (error) {\r\n                        dispatch(showError({ isError: true, errorMessage: \"Error occured during order placing\" }));\r\n                    }\r\n                } else {\r\n                    dispatch(showError({ isError: true, errorMessage: \"Empty data received from receiver's endpoint\" }));\r\n                }\r\n            })\r\n            .catch(error => {\r\n                let result: ShowError;\r\n                if (axios.isAxiosError(error)) {\r\n                    result = {\r\n                        isError: true,\r\n                        errorMessage: \"The following error occured when placing order: \" + error.message,\r\n                    };\r\n                } else {\r\n                    result = {\r\n                        isError: true,\r\n                        errorMessage: \"Unknown error occured when placing order\",\r\n                    };\r\n                }\r\n\r\n                dispatch(showError(result));\r\n            });\r\n    };\r\n};\r\nexport type SendOrder = typeof sendOrder;\r\n","import { useForm } from \"react-hook-form\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useRef } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getSelectedMinifigNumber } from \"reduxware/selectors\";\r\n\r\nimport { FORM_ID } from \"fixtures\";\r\nimport { SendOrder } from \"types\";\r\nimport { useMessage } from \"hooks\";\r\nimport { crits, messages, validators } from \"./utils\";\r\n\r\ninterface Props {\r\n    sendOrder: SendOrder;\r\n}\r\nexport const OrderDetails = (props: Props) => {\r\n    const { sendOrder } = props;\r\n    const minifigSetNumber = useSelector(getSelectedMinifigNumber);\r\n    const refForm = useRef<HTMLFormElement>(null);\r\n    const navigate = useNavigate();\r\n    const showMessage = useMessage();\r\n\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors },\r\n    } = useForm();\r\n\r\n    const onFormSubmit = () => {\r\n        const pack = new FormData(refForm.current as HTMLFormElement);\r\n        pack.append(\"setNumber\", minifigSetNumber);\r\n        pack && sendOrder(navigate, showMessage, pack);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <form className=\"details\" id={FORM_ID} onSubmit={handleSubmit(onFormSubmit)} ref={refForm}>\r\n                <h1 className=\"fromLeft\">Shipping details</h1>\r\n                <div className=\"foo\" id=\"foo\"></div>\r\n                <div className=\"form-item extendable\">\r\n                    <label className=\"required\" htmlFor=\"firstName\">\r\n                        Name\r\n                    </label>\r\n                    <input type=\"text\" {...register(\"firstName\", validators.firstName)} id=\"firstName\" />\r\n                    {errors.firstName && errors.firstName.type === \"required\" && <span>{messages.required}</span>}\r\n                    {errors.firstName && errors.firstName.type === \"minLength\" && (\r\n                        <span>\r\n                            {messages.minLength}\r\n                            {crits.firstName.minLength}\r\n                        </span>\r\n                    )}\r\n                    {errors.firstName && errors.firstName.type === \"maxLength\" && (\r\n                        <span>\r\n                            {messages.maxLength}\r\n                            {crits.firstName.maxLength}\r\n                        </span>\r\n                    )}\r\n                    {errors.firstName && errors.firstName.type === \"pattern\" && <span>{messages.pattern}</span>}\r\n                </div>\r\n\r\n                {/**Surname */}\r\n\r\n                <div className=\"form-item extendable\">\r\n                    <label className=\"required\" htmlFor=\"Surname\">\r\n                        Surname\r\n                    </label>\r\n                    <input id=\"Surname\" type=\"text\" {...register(\"surName\", validators.surName)} />\r\n                    {errors.surName && errors.surName.type === \"required\" && (\r\n                        <span>\r\n                            {messages.required}\r\n                            {crits.surName.required}\r\n                        </span>\r\n                    )}\r\n                    {errors.surName && errors.surName.type === \"minLength\" && (\r\n                        <span>\r\n                            {messages.minLength}\r\n                            {crits.surName.minLength}\r\n                        </span>\r\n                    )}\r\n                    {errors.surName && errors.surName.type === \"maxLength\" && (\r\n                        <span>\r\n                            {messages.maxLength}\r\n                            {crits.surName.maxLength}\r\n                        </span>\r\n                    )}\r\n                    {errors.surName && errors.surName.type === \"pattern\" && <span>{messages.pattern}</span>}\r\n                </div>\r\n\r\n                {/**Phone */}\r\n\r\n                <div className=\"form-item full-width\">\r\n                    <label className=\"required\" htmlFor=\"Phone\">\r\n                        Phone Number\r\n                    </label>\r\n                    <input id=\"Phone\" placeholder=\"Mobile or regular Polish phone with country code like 048 669086566\" type=\"text\" {...register(\"phone\", validators.phone)} />\r\n                    {errors.phone && errors.phone.type === \"required\" && (\r\n                        <span>\r\n                            {messages.required}\r\n                            {crits.phone.required}\r\n                        </span>\r\n                    )}\r\n                    {errors.phone && errors.phone.type === \"pattern\" && <span>{messages.pattern}</span>}\r\n                </div>\r\n\r\n                {/**Email */}\r\n\r\n                <div className=\"form-item full-width\">\r\n                    <label className=\"required\" htmlFor=\"email\">\r\n                        Email\r\n                    </label>\r\n                    <input id=\"email\" type=\"text\" {...register(\"email\", validators.email)} />\r\n                    {errors.email && errors.email.type === \"required\" && (\r\n                        <span>\r\n                            {messages.required}\r\n                            {crits.email.required}\r\n                        </span>\r\n                    )}\r\n                    {errors.email && errors.email.type === \"pattern\" && <span>{messages.pattern}</span>}\r\n                </div>\r\n\r\n                {/**Date of Birth */}\r\n\r\n                <div className=\"form-item full-width\">\r\n                    <label htmlFor=\"DoB\">Date of Birth</label>\r\n                    <input id=\"DoB\" placeholder=\"Date in yyyy-mm-dd or yyyy-m-dd format \" type=\"text\" {...register(\"dob\", validators.dob)} />\r\n                    {errors.dob && errors.dob.type === \"pattern\" && <span>{messages.pattern}</span>}\r\n                </div>\r\n\r\n                <div className=\"form-item full-width\">\r\n                    <label className=\"required\" htmlFor=\"address\">\r\n                        Address\r\n                    </label>\r\n                    <input type=\"text\" id=\"address\" {...register(\"address\", validators.address)} />\r\n                    {errors.address && errors.address.type === \"required\" && (\r\n                        <span>\r\n                            {messages.required}\r\n                            {crits.address.required}\r\n                        </span>\r\n                    )}\r\n                    {errors.address && errors.address.type === \"pattern\" && <span>{messages.pattern}</span>}\r\n                </div>\r\n\r\n                {/**City */}\r\n\r\n                <div className=\"form-item full-width\">\r\n                    <label className=\"required\" htmlFor=\"city\">\r\n                        City\r\n                    </label>\r\n                    <input type=\"text\" id=\"city\" {...register(\"city\", validators.city)} />\r\n                    {errors.city && errors.city.type === \"required\" && (\r\n                        <span>\r\n                            {messages.required}\r\n                            {crits.state.required}\r\n                        </span>\r\n                    )}\r\n                    {errors.city && errors.city.type === \"pattern\" && <span>{messages.pattern}</span>}\r\n                    {errors.city && errors.city.type === \"minLength\" && (\r\n                        <span>\r\n                            {messages.minLength}\r\n                            {crits.city.minLength}\r\n                        </span>\r\n                    )}\r\n                </div>\r\n\r\n                {/**State */}\r\n\r\n                <div className=\"form-item\">\r\n                    <label className=\"required\" htmlFor=\"state\">\r\n                        State\r\n                    </label>\r\n                    <input type=\"text\" id=\"state\" {...register(\"state\", validators.state)} />\r\n                    {errors.state && errors.state.type === \"required\" && (\r\n                        <span>\r\n                            {messages.required}\r\n                            {crits.state.required}\r\n                        </span>\r\n                    )}\r\n                    {errors.state && errors.state.type === \"pattern\" && <span>{messages.pattern}</span>}\r\n                    {errors.state && errors.state.type === \"minLength\" && (\r\n                        <span>\r\n                            {messages.minLength}\r\n                            {crits.state.minLength}\r\n                        </span>\r\n                    )}\r\n                </div>\r\n\r\n                {/**Zip Code */}\r\n\r\n                <div className=\"form-item\">\r\n                    <label className=\"required\" htmlFor=\"ZipCode\">\r\n                        Zip Code\r\n                    </label>\r\n                    <input id=\"ZipCode\" type=\"text\" placeholder=\" zip code in format xx-xxx\" {...register(\"zip\", validators.zip)} />\r\n                    {errors.zip && errors.zip.type === \"required\" && (\r\n                        <span>\r\n                            {messages.required}\r\n                            {crits.zip.required}\r\n                        </span>\r\n                    )}\r\n                    {errors.zip && errors.zip.type === \"pattern\" && <span>{messages.pattern}</span>}\r\n                </div>\r\n            </form>\r\n        </>\r\n    );\r\n};\r\n","import { ReactEventHandler } from \"react\";\r\nimport { PartsItem } from \"types\";\r\n\r\ninterface Props {\r\n    data: PartsItem;\r\n    loadHandler?: ReactEventHandler<HTMLImageElement>;\r\n}\r\nconst Part = (props: Props) => {\r\n    const { data, loadHandler } = props;\r\n\r\n    return (\r\n        <div className=\"part\">\r\n            <img className=\"part__image\" src={data.part.part_img_url} alt={data.part.name} onLoad={loadHandler} onError={loadHandler}></img>\r\n            <div className=\"part__text-items\">\r\n                <div className=\"part__item part__name\">{data.part.name}</div>\r\n                <a className=\"part__item part__code\" href={data.part.part_img_url} target=\"blank\">\r\n                    {data.part.part_num}\r\n                </a>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Part;\r\n","import { Parts } from \"./Parts\";\r\n\r\nexport default Parts;\r\n","import uuid from \"react-uuid\";\r\n\r\nimport { after, isEmpty } from \"lodash\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useRef } from \"react\";\r\n\r\nimport { LoadingIndicator } from \"components\";\r\nimport { Part, NoParts } from \"../../components\";\r\nimport { PartsItem } from \"types\";\r\nimport { isOffline } from \"functions\";\r\nimport { useGetPartsQuery } from \"../../utils/partsApi\";\r\nimport { getSelectedMinifigNumber } from \"reduxware/selectors\";\r\n\r\nexport const Parts = () => {\r\n    const minifigID = useSelector(getSelectedMinifigNumber);\r\n    const { data: parts, isFetching, isError } = useGetPartsQuery(minifigID, { skip: isOffline() });\r\n    const refImages = useRef<HTMLDivElement>(null);\r\n\r\n    const onLoad = parts\r\n        ? after(parts.length, () => {\r\n              refImages.current?.classList.add(\"active\");\r\n          })\r\n        : () => {};\r\n\r\n    if (isFetching) return <LoadingIndicator />;\r\n    if (isError) return <NoParts />;\r\n\r\n    return parts && !isEmpty(parts) ? (\r\n        <div className=\"parts\" ref={refImages}>\r\n            {parts.map((partData: PartsItem) => {\r\n                return <Part data={partData} key={uuid()} loadHandler={onLoad} />;\r\n            })}\r\n        </div>\r\n    ) : (\r\n        <NoParts />\r\n    );\r\n};\r\n","import { Minifig } from \"types/index\";\r\nimport { Picture, Name } from \"components\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getSelectedMinifig } from \"reduxware/selectors\";\r\n\r\nexport const SummaryHeader = () => {\r\n    const fig = useSelector(getSelectedMinifig);\r\n    const { name, num_parts: num, set_img_url: url } = fig as Minifig;\r\n    const partsInfo = `There are ${num} parts in this minifig:`;\r\n\r\n    return (\r\n        <div className=\"summary__main items\">\r\n            <h2 className=\"black fromLeft\">Summary</h2>\r\n            <div className=\"minifigCard minifigCard--no-padding\">\r\n                {name && url && <Picture name={name} imageURL={url} />}\r\n                {name && <Name name={name} />}\r\n            </div>\r\n            {num && <p>{partsInfo}</p>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SummaryHeader;\r\n","import { BasicButton } from \"components\";\r\nimport { Parts } from \"../../components\";\r\nimport SummaryHeader from \"./Summary_Header\";\r\nimport { FORM_ID } from \"fixtures\";\r\n\r\nconst Summary = () => {\r\n    return (\r\n        <div className=\"summary\">\r\n            <SummaryHeader />\r\n            <Parts />\r\n            <BasicButton className=\"button uppercased\" type=\"submit\" form={FORM_ID}>\r\n                Submit\r\n            </BasicButton>\r\n        </div>\r\n    );\r\n};\r\nexport default Summary;\r\n","import { OrderDetails, Message, Summary } from \"./components\";\r\nimport { isOffline } from \"functions\";\r\n\r\nconst Order_Page = () => {\r\n    if (isOffline()) return <Message message={\"No Internet connection, try again some later\"} />;\r\n    return (\r\n        <main className=\"order\">\r\n            <OrderDetails />\r\n            <Summary />\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default Order_Page;\r\n","import { connect } from \"react-redux\";\r\nimport { RootStateType } from \"types\";\r\n\r\nimport Order_Page from \"./Order_Page\";\r\n\r\nconst mapStateToProps = (state: RootStateType) => ({\r\n    message: state.fetch.message,\r\n    isMessage: state.fetch.isMessage,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(Order_Page);\r\n"],"names":["props","message","className","React","FORM_ID","messages","crits","minLength","maxLength","pattern","required","validators","firstName","_objectSpread","surName","phone","email","dob","address","city","state","zip","connect","dispatch","sendOrder","navigate","showMessage","data","options","headers","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","_context","prev","next","axios","post","then","success","setTimeout","Paths","intro","error","showError","isError","errorMessage","catch","result","isAxiosError","stop","_x","apply","arguments","minifigSetNumber","useSelector","getSelectedMinifigNumber","refForm","useRef","useNavigate","useMessage","useForm","register","handleSubmit","errors","formState","id","onSubmit","pack","FormData","current","append","ref","htmlFor","type","placeholder","loadHandler","src","part","part_img_url","alt","name","onLoad","onError","href","target","part_num","minifigID","useGetPartsQuery","skip","isOffline","parts","isFetching","refImages","after","length","classList","add","isEmpty","map","partData","uuid","getSelectedMinifig","num","num_parts","url","set_img_url","partsInfo","imageURL","form","fetch","isMessage","Order_Page"],"sourceRoot":""}